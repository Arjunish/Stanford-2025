import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML

n = widgets.IntSlider(min=1, max=10, step=1, value=2, description='Number of Waves')
display(n)

#this is a container for the sliders to be displayed
a_column = widgets.VBox()
ω_column = widgets.VBox()
k_column = widgets.VBox()
sliders_box = widgets.HBox([a_column, ω_column, k_column])

#this is a list for the values of the sliders to put in the graph
line_sliders = []

def make_sliders(index):
    a = widgets.FloatSlider(min=0, max=10, step=0.1, description=f'a{index}')
    ω = widgets.FloatSlider(min=0, max=10, step=1, description=f'ω{index}')
    k = widgets.FloatSlider(min=0, max=10, step=0.1, description=f'k{index}')
    return {'a': a, 'ω': ω, 'k': k}

def update_sliders(change=None):
    a_column.children = []
    ω_column.children = []
    k_column.children = []
    line_sliders.clear()
    for i in range(n.value):
        sliders = make_sliders(i + 1)
        line_sliders.append(sliders)
        a_column.children += (sliders['a'],)
        ω_column.children += (sliders['ω'],)
        k_column.children += (sliders['k'],)

#updates the amount of sliders if n changes
gridsliders_box = widgets.HBox([sliders_box])
n.observe(update_sliders, names='value')
update_sliders(None)
display(gridsliders_box)

# button to make graph
start = widgets.Button(description="Animate Combined Wave")
display(start)

# Start animation function
def started(b):
    clear_output(wait=True)
    display(n)
    display(gridsliders_box)
    display(start)

    # Data setup
    x = np.linspace(-10, 10, 400)
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.set_xlim(0, 10)
    ax.set_ylim(-10, 10)
    line_sum, = ax.plot(x, np.zeros_like(x), color='green', label='Combined Wave')
    ax.legend()

    # Animation update function
    def update(frame):
        y_total = np.zeros_like(x)
        for sliders in line_sliders:
            a = sliders['a'].value
            ω = sliders['ω'].value
            k = sliders['k'].value
            t = 5
            y_total += a * np.sin(ω * x - k * t)
        line_sum.set_ydata(y_total)
        return (line_sum,)

    ani = animation.FuncAnimation(fig, update, frames=150, interval=100, blit=True)  # blit=False is key
    plt.show()



start.on_click(started)
